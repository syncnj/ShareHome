
  /*******************************************************************
  * GroupService.java
  * Generated by Backendless Corp.
  ********************************************************************/
		
package sharehome.com.androidsharehome2.backend;

import com.backendless.Backendless;
import com.backendless.async.callback.AsyncCallback;
import java.util.*;

import sharehome.com.androidsharehome2.backend.Group;
import sharehome.com.androidsharehome2.backend.Grocery;
import sharehome.com.androidsharehome2.backend.Post;

public class GroupService
{
    static final String BACKENDLESS_HOST = "https://api.backendless.com";
    static final String SERVICE_NAME = "GroupService";
    static final String SERVICE_VERSION_NAME = "1.0.0";
    static final String APP_VERSION = "v1";
    static final String APP_ID = "19E73C32-D357-313A-FF64-12612084E000";
    static final String SECRET_KEY = "19F8B6BD-34A1-655C-FF3E-9BD31F1B0C00";

    private static GroupService ourInstance = new GroupService();

    private GroupService(  )
    {
    }

    public static GroupService getInstance()
    {
        return ourInstance;
    }

    public static void initApplication()
    {
        Backendless.setUrl( GroupService.BACKENDLESS_HOST );
        // if you invoke this sample inside of android application, you should use overloaded "initApp" with "context" argument
        Backendless.initApp( GroupService.APP_ID, GroupService.SECRET_KEY, GroupService.APP_VERSION );
    }


    
    public sharehome.com.androidsharehome2.backend.Group getGroupById(java.lang.String groupId)
    {
        Object[] args = new Object[]{groupId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getGroupById", args, sharehome.com.androidsharehome2.backend.Group.class );
    }
    
    public void getGroupByIdAsync(java.lang.String groupId, AsyncCallback<sharehome.com.androidsharehome2.backend.Group> callback)
    {
        Object[] args = new Object[]{groupId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getGroupById", args, sharehome.com.androidsharehome2.backend.Group.class, callback);
    }
    
    public java.util.List<sharehome.com.androidsharehome2.backend.Grocery> getAllGrocery(java.lang.String groupId)
    {
        Object[] args = new Object[]{groupId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getAllGrocery", args, java.util.List.class );
    }
    
    public void getAllGroceryAsync(java.lang.String groupId, AsyncCallback<java.util.List<sharehome.com.androidsharehome2.backend.Grocery>> callback)
    {
        Object[] args = new Object[]{groupId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getAllGrocery", args, java.util.List.class, callback);
    }
    
    public java.util.List<sharehome.com.androidsharehome2.backend.Post> getAllPost(java.lang.String groupId)
    {
        Object[] args = new Object[]{groupId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getAllPost", args, java.util.List.class );
    }
    
    public void getAllPostAsync(java.lang.String groupId, AsyncCallback<java.util.List<sharehome.com.androidsharehome2.backend.Post>> callback)
    {
        Object[] args = new Object[]{groupId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getAllPost", args, java.util.List.class, callback);
    }
    
    public void createNewGroup(java.lang.String groupName, java.lang.String leaderId)
    {
        Object[] args = new Object[]{groupName, leaderId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "createNewGroup", args );
    }
    
    public void createNewGroupAsync(java.lang.String groupName, java.lang.String leaderId, AsyncCallback<Object> callback)
    {
        Object[] args = new Object[]{groupName, leaderId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "createNewGroup", args, Object.class, callback);
    }
    
    public boolean addMember(java.lang.String newGroupMemberId, java.lang.String groupId)
    {
        Object[] args = new Object[]{newGroupMemberId, groupId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "addMember", args, boolean.class );
    }
    
    public void addMemberAsync(java.lang.String newGroupMemberId, java.lang.String groupId, AsyncCallback<Boolean> callback)
    {
        Object[] args = new Object[]{newGroupMemberId, groupId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "addMember", args, Boolean.class, callback);
    }
    
    public java.lang.String getMemberList(java.lang.String groupId)
    {
        Object[] args = new Object[]{groupId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getMemberList", args, java.lang.String.class );
    }
    
    public void getMemberListAsync(java.lang.String groupId, AsyncCallback<java.lang.String> callback)
    {
        Object[] args = new Object[]{groupId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "getMemberList", args, java.lang.String.class, callback);
    }
    
    public boolean deleteMember(java.lang.String groupId, java.lang.String memberId)
    {
        Object[] args = new Object[]{groupId, memberId};
        return Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "deleteMember", args, boolean.class );
    }
    
    public void deleteMemberAsync(java.lang.String groupId, java.lang.String memberId, AsyncCallback<Boolean> callback)
    {
        Object[] args = new Object[]{groupId, memberId};
        Backendless.CustomService.invoke( SERVICE_NAME, SERVICE_VERSION_NAME, "deleteMember", args, Boolean.class, callback);
    }
    
}
